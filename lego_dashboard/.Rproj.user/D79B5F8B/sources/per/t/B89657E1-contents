server <- function(input, output, session) {
  
  
## Data changes in correlation based on user input 'data_messiness'
#   data_choice <- input$data_messiness
#   browser()
#   if (data_choice == "Low correlation"){
#     slr_data_adjusted <- slr_data %>% 
#       mutate(height = height + runif(nrow(slr_data), -1,1))
#     
#   }
#   else if (data_choice == "Medium correlation"){
#     slr_data_adjusted <- slr_data %>% 
#       mutate(height = height + runif(nrow(slr_data), -15,15))
#     
#   }
#   else{
#     data_choice <- slr_data %>% 
#            mutate(height = sample(height, size = nrow(slr_data)))
#     
# }
      
  lego_data_filtered <- reactive({
    lego %>% 
      filter(theme_name == input$theme)
  })
  


  output$rating_plot <- renderPlot({
    lego_data_filtered() %>% 
      ggplot(aes(x = star_rating)) +
      geom_histogram(fill = "indianred") +
      labs(x = "Rating",
           y = "Count"
      ) +
      theme_minimal() +
      theme(axis.text = element_text(size = 15, face = "bold"),
            axis.title = element_text(size = 18, face = "bold"))
    
  }
  )
  
  output$price_plot <- renderPlot({
    lego_data_filtered() %>% 
      ggplot(aes(x = list_price, y = star_rating)) +
      geom_point(col = "steelblue", size = 6) +
      labs(x = "Set price ($)",
           y = "Rating"
      ) +
      theme_minimal() +
      theme(axis.text = element_text(size = 15, face = "bold"),
            axis.title = element_text(size = 18, face = "bold"))
    
  }
  )
  
  
  output$lego_table <- DT::renderDataTable({
    lego_data_filtered() %>% 
      select(-country, -play_star_rating, -theme_name, -val_star_rating)
  })
 
  output$lego_landplot <- renderLeaflet({
    
  })
  
}
