title = element_text(size = 14, face = "bold")) +
labs(title = "Lego themes arranged by average star rating")
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("DT")
runApp()
lego <- read_csv("data/lego_sets.csv") %>%
select(-prod_long_desc) %>%
group_by(theme_name) %>%
mutate(theme_name = ifelse(str_detect(
theme_name, "Attack|Rampage|Transport|Pursuit|Breakout|Chase|Escape"),
'Jurassic Park', theme_name)) %>%
ungroup() %>%
filter(country == "US",
theme_name != "BOOST") %>%
relocate(set_name, .before = 1)
lego_data2 <- lego
View(lego_data2)
runApp()
lego_data_filtered
View(lego_data2)
View(lego_data2)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
lego
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
coord_cartesian(ylim = c(3, 5.5)) +
theme(axis.text = element_text(size = 12, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
coord_cartesian(ylim = c(3, 5)) +
theme(axis.text = element_text(size = 12, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
coord_cartesian(ylim = c(0, 5)) +
theme(axis.text = element_text(size = 12, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"))
lego %>%
ungroup() %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by average star rating")
lego %>%
ungroup() %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by median star rating")
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(0, 5)) +
theme(axis.text = element_text(size = 12, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"))
lego %>%
ungroup() %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
subtitle = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by median star rating")
lego %>%
ungroup() %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by median star rating")
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(0, 5)) +
theme(axis.text = element_text(size = 12, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(0, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(0, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(3, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego
lego %>%
group_by(theme_name) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, mean,  na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
#group_by(theme_name) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, mean,  na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego
lego %>%
#group_by(theme_name) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, mean, na.rm = TRUE))
lego %>%
#group_by(theme_name) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, mean, na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE))
lego %>%
group_by(theme_name) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, mean, na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
group_by(theme_name) %>%
#mutate(theme_name = fct_reorder(theme_name, star_rating, mean, na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE))
lego %>%
group_by(theme_name) %>%
#mutate(theme_name = fct_reorder(theme_name, star_rating, mean, na.rm = TRUE)) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
mutate(theme_name = fct_reorder(theme_name, av_rating)) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
lego %>%
ungroup() %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by median star rating")
runApp()
runApp()
runApp()
runApp()
runApp()
leaflet(legoland_geo) %>%
addProviderTiles(providers$Stamen.Watercolor)  %>%
addCircleMarkers(lat = ~lat, lng = ~long,
label = ~htmlEscape(str_c("Legoland ", name)),
color = "yellow", fillColor = "yellow", fillOpacity = 0.8)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lego %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
slice_max()
lego %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
slice_max(order_by = star_rating)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(median(star_rating, na.rm = TRUE))
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(median(star_rating, na.rm = TRUE)) %>%
slice_max(n = 5)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(median_rating = median(star_rating, na.rm = TRUE)) %>%
slice_max(order_by = median_rating, n = 5)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(median_rating = median(star_rating, na.rm = TRUE)) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
## option 2: group single-set Jurassic Park themes
lego <- read_csv("data/lego_sets.csv") %>%
select(-prod_long_desc) %>%
group_by(theme_name) %>%
mutate(theme_name = ifelse(str_detect(
theme_name, "Attack|Rampage|Transport|Pursuit|Breakout|Chase|Escape"),
'Jurassic Park', theme_name)) %>%
ungroup() %>%
filter(country == "US",
theme_name != "BOOST",
str_detect(theme_name, "DUPLO")) %>%
relocate(set_name, .before = 1)
View(lego)
## option 2: group single-set Jurassic Park themes
lego <- read_csv("data/lego_sets.csv") %>%
select(-prod_long_desc) %>%
group_by(theme_name) %>%
mutate(theme_name = ifelse(str_detect(
theme_name, "Attack|Rampage|Transport|Pursuit|Breakout|Chase|Escape"),
'Jurassic Park', theme_name)) %>%
ungroup() %>%
filter(country == "US",
theme_name != "BOOST",
!str_detect(theme_name, "DUPLO")) %>%
relocate(set_name, .before = 1)
View(lego)
## option 2: group single-set Jurassic Park themes
lego <- read_csv("data/lego_sets.csv") %>%
select(-prod_long_desc) %>%
group_by(theme_name) %>%
mutate(theme_name = ifelse(str_detect(
theme_name, "Attack|Rampage|Transport|Pursuit|Breakout|Chase|Escape"),
'Jurassic Park', theme_name)) %>%
ungroup() %>%
filter(country == "US", # only US
# remove themes
theme_name != "BOOST",
!str_detect(theme_name, "DUPLO")) %>%
relocate(set_name, .before = 1)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(median_rating = median(star_rating, na.rm = TRUE)) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
lego %>%
group_by(theme_name) %>%
summarise(set_count = count(star_rating),
median_rating = median(star_rating, na.rm = TRUE))
lego %>%
group_by(theme_name) %>%
summarise(set_count = count(theme_name),
median_rating = median(star_rating, na.rm = TRUE))
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(set_count = count(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(set_count = nrow(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
lego %>%
group_by(theme_name) %>%
summarise(set_count = n(),
median_rating = median(star_rating, na.rm = TRUE))
runApp()
runApp()
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(set_count = n(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
filter(set_count > = 5) %>%
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(set_count = n(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
filter(set_count >= 5) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
## find top 5 sets with highest median ratings
lego %>%
group_by(theme_name) %>%
summarise(set_count = n(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
filter(set_count >= 10) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE)
lego %>%
group_by(theme_name) %>%
summarise(set_count = n(),
median_rating = median(star_rating, na.rm = TRUE)) %>%
filter(set_count >= 5) %>%
slice_max(order_by = median_rating, n = 5, with_ties = TRUE) %>%
pull(theme_name)
runApp()
lego %>%
filter(theme_name %in% best_sets) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE))
runApp()
lego %>%
filter(theme_name %in% best_sets)
lego %>%
filter(theme_name %in% best_sets) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE))
lego %>%
filter(theme_name %in% best_sets) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal()
lego %>%
filter(theme_name %in% best_sets) %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Top Lego themes arranged by median star rating")
lego %>%
mutate(theme_name = fct_reorder(theme_name, star_rating, median,  na.rm = TRUE)) %>%
ggplot(aes(x = theme_name, y = star_rating)) +
geom_boxplot(fill = "goldenrod", col = "black") +
stat_boxplot(geom = "errorbar") +
labs(y = "Average set rating (stars)",
x = "Theme") +
theme_minimal() +
# coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 6, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold")) +
labs(subtitle = "Lego themes arranged by median star rating")
lego %>%
filter(theme_name %in% best_sets) %>%
group_by(theme_name) %>%
summarise(av_rating = mean(star_rating, na.rm = TRUE)) %>%
mutate(theme_name = fct_reorder(theme_name, av_rating)) %>%
slice_max(n = 5) %>%
ggplot() +
geom_col(aes(x = theme_name, y = as.numeric(av_rating)), fill = "indianred") +
labs(y = "Average set rating (stars)",
x = "Theme",
subtitle = "Top Lego themes arranged by mean star rating") +
theme_minimal() +
coord_cartesian(ylim = c(4, 5)) +
theme(axis.text = element_text(size = 7, face = "bold", hjust = 1, angle = 45),
axis.title = element_text(size = 12, face = "bold"),
title = element_text(size = 14, face = "bold"))
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='alasdair-morgan',
token='989130BE749F2AFEFB6B93ED4E17D26F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='alasdair-morgan', token='989130BE749F2AFEFB6B93ED4E17D26F', secret='wQxChr6wwi9hVJiLZUsajx17H6EfDimkLAuqCX9X')
library(rsconnect)
rsconnect::deployApp('')
library(rsconnect)
rsconnect::deployApp('global.R')
library(rsconnect)
rsconnect::deployApp('..')
getwd()
library(rsconnect)
rsconnect::deployApp()
